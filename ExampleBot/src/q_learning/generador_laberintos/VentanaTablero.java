package q_learning.generador_laberintos;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;

import q_learning.Casilla;

/**
 *
 * @author usuario_local
 */
@SuppressWarnings("serial")
public class VentanaTablero extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public static final int xboton = 30;
    public static final int yboton = 30;
    public static final int xInicio = 150;
    public static final int yInicio = 50;
    
    public static final int VACIO = 0;
    public static final int PARED = 1;
    public static final int INICIO = 2;
    public static final int META = 3;
    
    public static  int paso ;
    
     private Casilla tablero[][];
    private Casilla meta;
    private Casilla inicio;
    private AEstrella a; //guarda la referencia a toda la estructura del ejercicio
    int maxX;
    int maxY;
    public VentanaTablero() {
        initComponents();

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbPaso = new javax.swing.JLabel();
        btEmpezar = new javax.swing.JButton();
        btSalvarLaberinto = new javax.swing.JButton();
        btCargarLaberinto = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btReset = new javax.swing.JButton();
        jTextFieldX = new javax.swing.JTextField();
        jTextFieldY = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btEmpezar.setText("Empezar");
        btEmpezar.setEnabled(false);
        btEmpezar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEmpezarActionPerformed(evt);
            }
        });
        
        btSalvarLaberinto.setText("SALVAR LABERINTO");
        btSalvarLaberinto.setEnabled(true);
        btSalvarLaberinto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarLaberintoActionPerformed(evt);
            }
        });
        
        btCargarLaberinto.setText("CARGAR LABERINTO");
        btCargarLaberinto.setEnabled(true);
        btCargarLaberinto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btCargarLaberintoActionPerformed(evt);
            }
        });

        jLabel1.setText("Seleccione la casilla de inicio");

        btReset.setText("Reset");
        btReset.setEnabled(false);
        btReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btResetActionPerformed(evt);
            }
        });

        jTextFieldX.setText("15");
        jTextFieldX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldXActionPerformed(evt);
            }
        });

        jTextFieldY.setText("15");

        jLabel2.setText("x");

        jButton1.setText("Generar Tablero");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btEmpezar)
                        .addGap(31, 31, 31)
                        .addComponent(btSalvarLaberinto)
                        .addGap(31, 31, 31)
                        .addComponent(btCargarLaberinto)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(lbPaso)))
                .addContainerGap(302, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btEmpezar)
                    .addComponent(btSalvarLaberinto)
                    .addComponent(btCargarLaberinto)
                    .addComponent(jLabel1)
                    .addComponent(btReset)
                    .addComponent(jButton1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(lbPaso))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addContainerGap(516, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btEmpezarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEmpezarActionPerformed
        // TODO add your handling code here:
        btEmpezar.setEnabled(false);
        resolver();
    }//GEN-LAST:event_btEmpezarActionPerformed
    
    private void btSalvarLaberintoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEmpezarActionPerformed
        // TODO add your handling code here:
        salvarLaberintoEnFichero();
    }//GEN-LAST:event_btEmpezarActionPerformed
    
   private void btCargarLaberintoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEmpezarActionPerformed
        // TODO add your handling code here:
        cargarLaberintoDesdeFichero();
    }//GEN-LAST:event_btEmpezarActionPerformed

	private void btResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btResetActionPerformed
        reset();
        
    }//GEN-LAST:event_btResetActionPerformed

    private void jTextFieldXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldXActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        generarTablero();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void generarTablero() {
		// TODO Auto-generated method stub
    	int x = Integer.valueOf(jTextFieldX.getText());
        int y = Integer.valueOf(jTextFieldY.getText());
        
        paso = INICIO;
        tablero = new Casilla [x][y];
        btEmpezar.setEnabled(false);
        maxX = x;
        maxY = y;
        /* Inicializa las casillas visualmente y las a√±ade a la ventana*/
        for(int i = 0; i < x ; i++)
        {
            for(int j = 0; j < y;j++)
            {
                tablero[i][j] = new Casilla(i,j);
                tablero[i][j].setBounds(xboton*i+xInicio, yboton*j+yInicio, xboton, yboton);
                tablero[i][j].setVisible(true);
                tablero[i][j].setBackground(Color.WHITE);
                tablero[i][j].addActionListener(new ActionListener() 
                {
                    public void actionPerformed(ActionEvent e) {
                        Casilla c = (Casilla)e.getSource();
                        
                        switch(paso)
                        {
                            case INICIO:
                                c.setInicio();
                                
                                inicio = tablero[c.getPosX()][c.getPosY()];
                                /* Esto luego habr√° que pasarlo como par√°metro, o seleccionarlo visualmente */
                                setInicio(inicio);
        

        
                                paso = META;
                                
                                jLabel1.setText("Seleccione la meta");
                                break;
                            case META:
                                if(!c.esInicio())
                                {
                                     paso = PARED;
                                    meta = tablero[c.getPosX()][c.getPosY()];
                                    setMeta(meta);
                                    jLabel1.setText("Seleccione las paredes");
                                    btEmpezar.setEnabled(true);
                                    a = new AEstrella(tablero, inicio, meta, maxX, maxY);
                                }
                               
                                break;
                            case PARED:
                                if(!c.esInicio() && !c.esMeta() && btEmpezar.isEnabled())
                                {
                                    if (!c.esPared())
                                    {
                                        a.setPared(c, true);
                                        setPared(c, true);
                                    }
                                    else
                                    {
                                        a.setPared(c, false);
                                        setPared(c, false);
                                    }
                                }
                                
                                break;
                                    
                        }
                    }
                });
                this.add(tablero[i][j]);
            }
        }
        
        repaint();
        jButton1.setEnabled(false);
        jTextFieldX.setEnabled(false);
        jTextFieldY.setEnabled(false);
        btReset.setEnabled(true);
	}


	public void reset()
    {
        jLabel1.setText("Seleccione la casilla de inicio");
        paso = INICIO;
        btEmpezar.setEnabled(false);
        for(int i = 0; i < maxX ; i++)
        {
            for(int j = 0; j < maxY;j++)
            {
                tablero[i][j].setAbierto(true);
                tablero[i][j].setPared(false);
                tablero[i][j].setMeta(false);
                 tablero[i][j].setInicio(false);
                 tablero[i][j].setPadre(null);
                tablero[i][j].setF(Double.MAX_VALUE);
                tablero[i][j].setBackground(Color.WHITE);
                this.repaint();
                    
            }
        }
        a = null;
    }
    public void resolver()
    {
        this.setCamino(a.buscaMejorCamino());
    }
   
    public void setCamino(ArrayList<Casilla> camino)
    {
        if(camino == null)
        {
            jLabel1.setText("No se pudo encontrar ningun camino");
        }
        else
        {
             for(Casilla c : camino)
            {
                this.tablero[c.getPosX()][c.getPosY()].setBackground(Color.yellow);
            }
         
            this.repaint();
        }
       
    }
    
    /*
    Si el booleano que se le pasa es true, lo hace pared, si no, lo hace casilla normal
    */
    public void setPared(Casilla pared, boolean b)
    {    
        if(b)
        {
            //this.tablero[pared.getPosX()][pared.getPosY()] = pared;
            this.tablero[pared.getPosX()][pared.getPosY()].setPared(true);
            this.tablero[pared.getPosX()][pared.getPosY()].setBackground(Color.black);
            a.setPared(tablero[pared.getPosX()][pared.getPosY()], true);
        }
        else
        {
            //this.tablero[pared.getPosX()][pared.getPosY()] = pared;
            this.tablero[pared.getPosX()][pared.getPosY()].setPared(false);
            this.tablero[pared.getPosX()][pared.getPosY()].setBackground(Color.white);
            a.setPared(tablero[pared.getPosX()][pared.getPosY()], false);
        }
       
        this.repaint();
    }
    
    
    
    public void setMeta(Casilla meta)
    {
        //this.tablero[meta.getPosX()][meta.getPosY()] = meta;
        this.tablero[meta.getPosX()][meta.getPosY()].setMeta();
        this.tablero[meta.getPosX()][meta.getPosY()].setBackground(Color.green);
        
        this.repaint();
    }
    
    
    public void setInicio(Casilla inicio)
    {
        //this.tablero[inicio.getPosX()][inicio.getPosY()] = inicio;
        this.tablero[inicio.getPosX()][inicio.getPosY()].setInicio();
        this.tablero[inicio.getPosX()][inicio.getPosY()].setBackground(Color.blue);
        
        this.repaint();
    }

    public Casilla getCasilla(int x, int y)
    {
        return this.tablero[x][y];
    }
    
    private void salvarLaberintoEnFichero() {
		
    	FileWriter fichero = null;
        PrintWriter pw = null;
        try
        {
            fichero = new FileWriter("laberinto.txt");
            pw = new PrintWriter(fichero);
 
            
            pw.println(maxX + "," + maxY);            
            for(int j = 0; j < maxY;j++)
            {
                for(int i = 0; i < maxX ; i++)
                {
                	//guarda un 0 si es casilla normal, y 1 si es pared
                	if(this.tablero[i][j].esPared())
                		pw.print(PARED);
                	else if(this.tablero[i][j].esInicio())
                		pw.print(INICIO);
                	else if(this.tablero[i][j].esMeta())
                		pw.print(META);
                	else
                		pw.print(VACIO);
                	
                	if(i != maxX-1)
                		pw.print(",");
                	else
                		pw.println();
                }            
            }

            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
    	
    	
    	
	}
    
    private void cargarLaberintoDesdeFichero() {
    	//borramos el laberinto anterior
    	for(int j = 0; j < maxY;j++)
        {
            for(int i = 0; i < maxX ; i++)
            {
            	this.tablero[i][j].setEnabled(false);
            	this.tablero[i][j].setVisible(false);
            	this.tablero[i][j] = null;
            }            
        }
    	
    	//leemos el fichero y generamos el nuevo laberinto
    	FileReader fichero = null;
    	BufferedReader br = null;
        try
        {
            fichero = new FileReader("laberinto.txt");
            br = new BufferedReader(fichero);
 
            String linea;
            linea=br.readLine();

            //generamos un tablero de las dimensioes de la primera linea
            String dim[] = linea.split(",");
            jTextFieldX.setText(dim[0]);
            jTextFieldY.setText(dim[1]);
            
            generarTablero(); //aquÌ genera el tablero y vuelve a dar valor a las variables locales
            
            //generamos el resto de casillas
            int cont_Y = 0;
            while((linea=br.readLine())!=null)
            {
            	String cas[] = linea.split(",");
            	for(int i = 0; i < maxX ; i++)
            	{
            		if(Integer.parseInt(cas[i]) == PARED)
            		{
            			a.setPared(this.tablero[i][cont_Y], true);
                        setPared(this.tablero[i][cont_Y], true);
            		}
                	else if(Integer.parseInt(cas[i]) == INICIO)
                	{
                        //inicio = this.tablero[i][cont_Y];
                        //setInicio(inicio);
                	}
                	else if(Integer.parseInt(cas[i]) == META)
                	{
                		//meta = this.tablero[i][cont_Y];
                        //setMeta(meta);
                	}

            	}
            	cont_Y++;
            }
               
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
           try {
           // Nuevamente aprovechamos el finally para 
           // asegurarnos que se cierra el fichero.
           if (null != fichero)
              fichero.close();
           } catch (Exception e2) {
              e2.printStackTrace();
           }
        }
    	
    }
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEmpezar;
    private javax.swing.JButton btReset;
    private javax.swing.JButton btSalvarLaberinto;
    private javax.swing.JButton btCargarLaberinto;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextFieldX;
    private javax.swing.JTextField jTextFieldY;
    private javax.swing.JLabel lbPaso;
    // End of variables declaration//GEN-END:variables
}
